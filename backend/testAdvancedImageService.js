require('dotenv').config();
const advancedImageService = require('./services/advancedImageService');

async function testImageService() {
  console.log('=================================');
  console.log('Testing Servicio Avanzado de Im√°genes');
  console.log('=================================\n');

  // Art√≠culos de prueba simulados
  const testArticles = [
    {
      title: 'New AI Breakthrough: GPT-5 Announced with Unprecedented Capabilities',
      link: 'https://example.com/ai-breakthrough-1',
      contentSnippet: 'OpenAI announces GPT-5 with revolutionary capabilities...',
      category: 'ai'
    },
    {
      title: 'Critical Security Vulnerability Found in Major Cloud Provider',
      link: 'https://example.com/security-vuln-1',
      contentSnippet: 'Security researchers discovered critical vulnerability...',
      category: 'cybersecurity'
    },
    {
      title: 'Bitcoin Reaches New All-Time High Amid Institutional Adoption',
      link: 'https://example.com/bitcoin-ath-1',
      contentSnippet: 'Bitcoin price surges to new record as institutions...',
      category: 'finance-crypto'
    },
    {
      title: 'Quantum Computer Achieves 1000 Qubit Milestone',
      link: 'https://example.com/quantum-milestone-1',
      contentSnippet: 'IBM announces breakthrough in quantum computing...',
      category: 'quantum'
    },
    {
      title: 'Revolutionary IoT Sensor Network Transforms Smart Cities',
      link: 'https://example.com/iot-smart-cities-1',
      contentSnippet: 'New IoT sensor network enables unprecedented city monitoring...',
      category: 'iot'
    }
  ];

  console.log('üß™ Probando extracci√≥n de im√°genes para 5 art√≠culos de prueba:\n');

  const results = [];
  for (const article of testArticles) {
    console.log(`üì∞ Procesando: "${article.title.substring(0, 50)}..."`);
    console.log(`   Categor√≠a: ${article.category}`);
    
    const startTime = Date.now();
    try {
      const imageUrl = await advancedImageService.getOptimalImage(article, article.category);
      const elapsed = Date.now() - startTime;
      
      console.log(`   ‚úÖ Imagen obtenida en ${elapsed}ms`);
      console.log(`   URL: ${imageUrl.substring(0, 80)}...`);
      
      results.push({
        title: article.title,
        category: article.category,
        imageUrl: imageUrl,
        time: elapsed,
        success: true
      });
    } catch (error) {
      console.log(`   ‚ùå Error: ${error.message}`);
      results.push({
        title: article.title,
        category: article.category,
        error: error.message,
        success: false
      });
    }
    console.log();
  }

  // Probar detecci√≥n de duplicados
  console.log('üîÑ Probando prevenci√≥n de duplicados:\n');
  
  const duplicateTest = testArticles[0];
  console.log(`Intentando obtener imagen para el mismo art√≠culo nuevamente...`);
  
  const image1 = await advancedImageService.getOptimalImage(duplicateTest, duplicateTest.category);
  console.log(`Primera imagen: ${image1.substring(0, 60)}...`);
  
  // Limpiar cach√© de sesi√≥n para simular nueva sesi√≥n
  advancedImageService.usedImages.clear();
  
  const image2 = await advancedImageService.getOptimalImage(duplicateTest, duplicateTest.category);
  console.log(`Segunda imagen (desde cach√©): ${image2.substring(0, 60)}...`);
  
  if (image1 === image2) {
    console.log('‚úÖ Cach√© funcionando correctamente - misma imagen devuelta');
  } else {
    console.log('‚ö†Ô∏è  Las im√°genes son diferentes (esperado si el cach√© de BD no est√° configurado)');
  }

  // Estad√≠sticas
  console.log('\n\nüìä ESTAD√çSTICAS DE LA PRUEBA:');
  console.log('================================');
  
  const successful = results.filter(r => r.success).length;
  const failed = results.length - successful;
  const avgTime = results.filter(r => r.success)
    .reduce((acc, r) => acc + r.time, 0) / successful;
  
  console.log(`‚úÖ Exitosas: ${successful}/${results.length}`);
  console.log(`‚ùå Fallidas: ${failed}/${results.length}`);
  console.log(`‚è±Ô∏è  Tiempo promedio: ${Math.round(avgTime)}ms`);
  console.log(`üì¶ Im√°genes en cach√© de sesi√≥n: ${advancedImageService.usedImages.size}`);

  // Mostrar estad√≠sticas del servicio
  try {
    const stats = await advancedImageService.getStatistics();
    console.log(`\nüìà Estad√≠sticas del servicio:`);
    console.log(`   Cach√© de sesi√≥n: ${stats.sessionCacheSize} im√°genes`);
    console.log(`   Cach√© en BD: ${stats.databaseCacheSize} registros`);
  } catch (error) {
    console.log(`\n‚ö†Ô∏è  No se pudieron obtener estad√≠sticas de BD (tabla no existe a√∫n)`);
  }

  console.log('\nüí° RECOMENDACIONES:');
  console.log('1. Ejecuta el SQL de migraci√≥n en Supabase Dashboard');
  console.log('2. Configura API keys de Unsplash/Pexels en .env (opcional)');
  console.log('3. El sistema funciona sin APIs externas usando Picsum');
  console.log('4. Cada imagen generada es √∫nica y no se repite');
}

// Ejecutar prueba
testImageService().catch(console.error);